je veux analyser une architecture de base de donnees qui gerer l'inventaire d'una administration etatiques : les tables sont : 

	1- table utilisateurs ( id, username, password, rank, created_at) 
	2- table categories(id,nom,code) ,
	3-table services (id, nom)
	3- table bureaux(id, id_service, bureau), 
	4- table fournisseurs(id,nom,adresse,telephone,created_at), 
	5- table unites(id,nom), 
	6- table produits(id, code, nom, id_categorie, type (enum : consommable , inventoree),id_unite, stock_initial ),
		- stock inital nous permet de commencer le calcul de fiche de stock ensuite il s'ajoute avec achat et diminue avec decharge
		- pour regle la fiche il suffit de regle le stock initial
		- quand on supprime un achat ou decharge tout sera recalcule parceque stock actuel est dynamique
	7- table achats (id, num_achat, date datetime, id_fournisseur) , 
	8- table achats_details ( id, id_achat, id_produit, prix_achat, quantite, date_peremption) , 
	9- table inventaire (id,id_achat, id_produit, num_inventaire, sn, etat ,date_entree)
		- id_inventaire est la cle du num_inventaire , on peux suivre l'evolution du num_inventaire du stock a decharge a reparation a trasfert a reforme en suivant id_inventaire en datetime dans tout les mouvements cree  
		- id_produit dans tout les tables forme en datetime  fiche de stock
		-table id_inventaire forme le registre
		- on a ajouter etat pour pouvoir separe decharge qui sera en instance jusqu'a ce que la fiche d'inventaire soit valide par decharge ce qui modifie etat a valide apres qu'elle etait a stock
		-dans l'etape de l'inventaire d'un bon d'achat on consulte le stock non inventoree si il est superieur a la quantite dans le bon d'achat on met un message alerte qu'il y aun stock non inventoree on doit commencer avec avant de passer au bon d'achat
	10- table decharges ( id , num_decharge, date datetime, id_service, id_bureau, id_produit, quantite, id_inventaire)
		- on sauvegarde id_inventaire pour pouvoir modifier num_inventaire sans effecter l'historique



		actions : 
		excel 
		imprimer


==========================================================================

-- =========================
-- 1. Table utilisateurs
-- =========================
CREATE TABLE utilisateurs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    rank ENUM('admin','user','viewer') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =========================
-- 2. Table categories
-- =========================
CREATE TABLE categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(100) NOT NULL,
    code VARCHAR(50) UNIQUE
);

-- =========================
-- 3. Table services
-- =========================
CREATE TABLE services (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(100) NOT NULL
);

-- =========================
-- 4. Table bureaux
-- =========================
CREATE TABLE bureaux (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_service INT NOT NULL,
    bureau VARCHAR(100) NOT NULL,
    FOREIGN KEY (id_service) REFERENCES services(id)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- =========================
-- 5. Table fournisseurs
-- =========================
CREATE TABLE fournisseurs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(150) NOT NULL,
    adresse TEXT,
    telephone VARCHAR(30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =========================
-- 6. Table unites
-- =========================
CREATE TABLE unites (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(50) NOT NULL
);

-- =========================
-- 7. Table produits
-- =========================
CREATE TABLE produits (
    id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(100) UNIQUE,
    nom VARCHAR(150) NOT NULL,
    id_categorie INT NOT NULL,
    type ENUM('consommable','inventoree') NOT NULL,
    id_unite INT,
    stock_initial DECIMAL(10,2) DEFAULT 0,
    FOREIGN KEY (id_categorie) REFERENCES categories(id)
        ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_unite) REFERENCES unites(id)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- =========================
-- 8. Table achats
-- =========================
CREATE TABLE achats (
    id INT AUTO_INCREMENT PRIMARY KEY,
    num_achat VARCHAR(50) UNIQUE,
    date DATETIME NOT NULL,
    id_fournisseur INT,
    FOREIGN KEY (id_fournisseur) REFERENCES fournisseurs(id)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- =========================
-- 9. Table achats_details
-- =========================
CREATE TABLE achats_details (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_achat INT NULL,
    id_produit INT NOT NULL,
    prix_achat DECIMAL(10,2) NOT NULL,
    quantite DECIMAL(10,2) NOT NULL,
    date_peremption DATE NULL,
    FOREIGN KEY (id_achat) REFERENCES achats(id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_produit) REFERENCES produits(id)
        ON DELETE RESTRICT ON UPDATE CASCADE
);

-- =========================
-- 10. Table inventaire
-- =========================
CREATE TABLE inventaire (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_achats_details INT NOT NULL,
    num_inventaire VARCHAR(100) UNIQUE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_achats_details) REFERENCES achats_details(id)
        ON DELETE CASCADE ON UPDATE CASCADE,
);

-- =========================
-- 11. Table decharges
-- =========================
CREATE TABLE decharges (
    id INT AUTO_INCREMENT PRIMARY KEY,
    num_decharge VARCHAR(50) UNIQUE,
    date DATETIME NOT NULL,
    id_service INT NOT NULL,
    id_bureau INT NOT NULL,
    id_produit INT,
    quantite DECIMAL(10,2) NOT NULL,
    id_inventaire INT,
    FOREIGN KEY (id_service) REFERENCES services(id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_bureau) REFERENCES bureaux(id)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id_produit) REFERENCES produits(id)
        ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (id_inventaire) REFERENCES inventaire(id)
        ON DELETE SET NULL ON UPDATE CASCADE
);

-- =========================
-- Index pour accélérer les recherches
-- =========================
CREATE INDEX idx_produits_categorie ON produits(id_categorie);
CREATE INDEX idx_achats_date ON achats(date);
CREATE INDEX idx_achats_details_produit ON achats_details(id_produit);
CREATE INDEX idx_inventaire_produit ON inventaire(id_produit);
CREATE INDEX idx_decharges_produit ON decharges(id_produit);
